[unstable]
build-std = ["core", "compiler_builtins"]
build-std-features = ["compiler-builtins-mem"]

[build]
target = "x86_64-os.json"

# To make it easier to run our kernel in QEMU, we can set the runner configuration key for cargo:
[target.'cfg(target_os = "none")']
runner = "bootimage runner"

# 🔗 https://os.phil-opp.com/minimal-rust-kernel/#the-build-std-option
#
# The build-std Option
#
# That’s where the build-std feature of cargo comes in. It allows to recompile core and other standard library crates on demand, instead of using the precompiled versions shipped with the Rust installation. This feature is very new and still not finished, so it is marked as “unstable” and only available on nightly Rust compilers.
#
# To use the feature, we need to create a cargo configuration file at .cargo/config.toml with the following content:
#
# # in .cargo/config.toml
#
# [unstable]
# build-std = ["core", "compiler_builtins"]
#
# This tells cargo that it should recompile the core and compiler_builtins libraries. The latter is required because it is a dependency of core. In order to recompile these libraries, cargo needs access to the rust source code, which we can install with rustup component add rust-src.
#
# After setting the unstable.build-std configuration key and installing the rust-src component, we can rerun our build command:
#
# > cargo build --target x86_64-blog_os.json
#
# We see that cargo build now recompiles the core, rustc-std-workspace-core (a
# dependency of compiler_builtins), and compiler_builtins libraries for our
# custom target.
#
#
# # Memory-Related Intrinsics
#
# Some memory-related functions in that crate that are not enabled by default because they are
# normally provided by the C library on the system. These functions include memset, which sets all
# bytes in a memory block to a given value, memcpy, which copies one memory block to another, and
# memcmp, which compares two memory blocks. While we didn’t need any of these functions to compile
# our kernel right now, they will be required as soon as we add some more code to it (e.g. when
# copying structs around).
#
# Fortunately, the compiler_builtins crate already contains implementations for
# all the needed functions, they are just disabled by default to not collide
# with the implementations from the C library. We can enable them by setting
# cargo’s build-std-features flag to ["compiler-builtins-mem"]. Like the
# build-std flag, this flag can be either passed on the command line as a -Z
# flag or configured in the unstable table in the .cargo/config.toml file.
#
# Since we always want to build with this flag, the config file option makes
# more sense for us:
# # in .cargo/config.toml
# 
# [unstable]
# build-std-features = ["compiler-builtins-mem"]
# build-std = ["core", "compiler_builtins"]
#
#[🔗](https://os.phil-opp.com/minimal-rust-kernel/#set-a-default-target)
# Set a Default Target
# 
# To avoid passing the --target parameter on every invocation of cargo build, we can override the default target. To do this, we add the following to our cargo configuration file at .cargo/config.toml:
# 
# # in .cargo/config.toml
# 
# [build]
# target = "x86_64-blog_os.json"
# 
# This tells cargo to use our x86_64-blog_os.json target when no explicit --target argument is passed. This means that we can now build our kernel with a simple cargo build. For more information on cargo configuration options, check out the official documentation.
# 
# We are now able to build our kernel for a bare metal target with a simple cargo build. However, our _start entry point, which will be called by the boot loader, is still empty. It’s time that we output something to screen from it.
#
#[🔗 Using cargo run](https://os.phil-opp.com/minimal-rust-kernel/#using-cargo-run)
#
# To make it easier to run our kernel in QEMU, we can set the runner configuration key for cargo:
#
# # in .cargo/config.toml
#
# [target.'cfg(target_os = "none")']
# runner = "bootimage runner"
#
# The target.'cfg(target_os = "none")' table applies to all targets whose target configuration file’s "os" field is set to "none". This includes our x86_64-blog_os.json target. The runner key specifies the command that should be invoked for cargo run. The command is run after a successful build with the executable path passed as the first argument. See the cargo documentation for more details.
#
# The bootimage runner command is specifically designed to be usable as a runner executable. It links the given executable with the project’s bootloader dependency and then launches QEMU. See the Readme of bootimage for more details and possible configuration options.
