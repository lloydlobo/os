[package]
name = "os"
version = "0.1.0"
edition = "2018"

# The `isa-debug-exit` device in QEMU allows easy exit from the guest system. 
# - Bootimage now maps success exit code to exit code 0 for proper recognition of test success by `cargo test`. 
# - To view serial output from QEMU, use the `-serial` argument to redirect to stdout. 
# - Since we use the `isa-debug-exit` device and serial port to report test results, the QEMU window is
#   unnecessary and can be hidden with the `-display none` argument.
# Configure timeout: Bootimage tool sets a default timeout of 5 minutes for each test executable due
# to the possibility of endless loops in many situations.
[package.metadata.bootimage]
test-args = [
  "-device",
  "isa-debug-exit,iobase=0xf4,iosize=0x04",
  "-serial",
  "stdio",
  "-display",
  "none",
]
test-success-exit-code = 33 # (0x10 << 1) | 1
test-timeout = 300 # (in seconds)

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Adding the bootloader as a dependency is not enough to actually create a bootable disk image. 
# The problem is that we need to link our kernel with the bootloader after compilation, but cargo 
# has no support for post-build scripts. To solve this problem, a tool named bootimage exists 
# that first co mpiles the kernel and bootloader, and then links them together to create a 
# bootable disk image. For running bootimage and building the bootloader, you need to have the llvm
# -tools preview rustup component installed. 
# You can do so by executing `rustup component add llvm- tools preview`. After installing 
# bootimage and adding the llvm-tools-preview component, we can create a bootable disk image by 
# executing: > cargo bootimage # Created bootimage for 'os' as bootable disk image named bootimage-
# blog_os.bin in your target/x86_64-blog_os/debug directory.
bootloader = "0.9.8"
volatile = "0.2.6"
# basic kind of mutex in computer science that requires no operating system features: the spinlock.
# Instead of blocking, the threads simply try to lock it again and again in a tight loop, thus
# burning CPU time until the mutex is free again.
spin = "0.5.2"
# Exit Device: Instead of manually invoking the in and out assembly instructions, we use the abstractions provided
# by the x86_64 crate.
x86_64 = "0.14.2"
# This crate intializes the UART and sends data over the serial port.
uart_16550 = "0.2.0"

# The one-time initialization of statics with non-const functions is a common problem in Rust.
# Fortunately, there already exists a good solution in a crate named lazy_static. This crate
# provides a lazy_static! macro that defines a lazily initialized static. Instead of computing its
# value at compile time, the static lazily initializes itself when accessed for the first time.
# Thus, the initialization happens at runtime, so arbitrarily complex initialization code is
# possible. We need the spin_no_std feature, since we don’t link the standard library.
[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"]

# Disabling Unwinding
#
# This sets the panic strategy to abort for both the dev profile (used for
# cargo build) and the release profile (used for cargo build --release). Now
# the eh_personality language item should no longer be required.

# the profile used for `cargo build`
[profile.dev]
# NOTE: There is currently a bug in cargo that leads to “duplicate lang item” errors on cargo test in some cases. It occurs when you have set panic = "abort" for a profile in your Cargo.toml. Try removing it, then cargo test should work. See the cargo issue for more information on this.
# Temoprarily commented out vvvvvvvv
# panic = "abort" # disable stack unwinding on panic

# the profile used for `cargo build --release`
[profile.release]
panic = "abort" # disable stack unwinding on panic
